{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AccessError = _resolveComponent(\"AccessError\");\n\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AccessError)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_router_view)]));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;SACYA,6BAAXC,oBAEM,KAFN,EAEMC,UAFN,EAEM,CADLC,aAAcC,sBAAd,CACK,CAFN,oBAGAH,oBAEM,KAFN,EAEMI,UAFN,EAEM,CADLF,aAAcG,sBAAd,CACK,CAFN","names":["$data","_createElementBlock","_hoisted_1","_createVNode","_component_AccessError","_hoisted_2","_component_router_view"],"sourceRoot":"","sources":["C:\\Project\\Geekbrains\\prof-layout\\src\\App.vue"],"sourcesContent":["<template>\r\n\t<div v-if=\"error\">\r\n\t\t<AccessError/>\r\n\t</div>\r\n\t<div v-else>\r\n\t\t<router-view/>\r\n\t</div>\r\n</template>\r\n\t\r\n\r\n<script>\r\n\timport AccessError from \"@/components/AccessError\";\r\n\t\r\n\texport default {\r\n\t\tname: \"App\",\r\n\t\tcomponents: {\r\n\t\t\tAccessError\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tapi: 'http://localhost:3000',\r\n\t\t\t\terror: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tgetJson(url) {\r\n\t\t\t\treturn fetch(url)\r\n\t\t\t\t\t.then(result => result.json())\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\tthis.error = true;\r\n\t\t\t\t\t})\r\n\t\t\t},\r\n\t\t\tpostJson(url, data){\r\n\t\t\t\treturn fetch(url, {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(data)\r\n\t\t\t\t})\r\n\t\t\t\t\t.then(result => result.json())\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(`ошибка записи: ${error}`);\r\n\t\t\t\t\t\t// this.$refs.error.text = error;\r\n\t\t\t\t\t})\r\n\t\t\t},\r\n\t\t\tputJson(url, data){\r\n\t\t\t\treturn fetch(url, {\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(data)\r\n\t\t\t\t})\r\n\t\t\t\t\t.then(result => result.json())\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(`ошибка обновления: ${error}`);\r\n\t\t\t\t\t\t// this.$refs.error.text = error;\r\n\t\t\t\t\t})\r\n\t\t\t},\r\n\t\t\tdeleteJson(url){\r\n\t\t\t\treturn fetch(url, {\r\n\t\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\t})\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tconsole.log('removed');\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\tconsole.log(`ошибка удаления: ${error}`);\r\n\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t},\r\n\t\tmounted() {\r\n\t\t},\r\n\t}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}