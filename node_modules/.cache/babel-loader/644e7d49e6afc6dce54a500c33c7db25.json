{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AccessError = _resolveComponent(\"AccessError\");\n\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_AccessError), _createVNode(_component_router_view)], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;;6DACCA,aAAcC,sBAAd,GACAD,aAAcE,sBAAd","names":["_createVNode","_component_AccessError","_component_router_view"],"sourceRoot":"","sources":["C:\\Project\\Geekbrains\\prof-layout\\src\\App.vue"],"sourcesContent":["<template>\r\n\t<AccessError/>\r\n\t<router-view/>\r\n</template>\r\n\t\r\n\r\n<script>\r\n\timport AccessError from \"@/components/AccessError\";\r\n\t\r\n\tconst API = 'https://raw.githubusercontent.com/GeekBrainsTutorial/online-store-api/master/responses';\r\n\t\r\n\texport default {\r\n\t\tname: \"App\",\r\n\t\tcomponents: {\r\n\t\t\tAccessError\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tcatalogUrl: '/catalogData.json',\r\n\t\t\t\tproducts: [],\r\n\t\t\t\tfiltered: [],\r\n\t\t\t\tcart: JSON.parse(localStorage.getItem(\"toCart\")),\r\n\t\t\t\timg: './img/null.png',\r\n\t\t\t\tuserSearch: '',\r\n\t\t\t\tshow: false,\r\n\t\t\t\tcartPrice: 0,\r\n\t\t\t\terror: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tfilter() {\r\n\t\t\t\tconst regexp = new RegExp(this.userSearch, 'i');\r\n\t\t\t\tthis.filtered = this.products.filter(product => regexp.test(product.product_name));\r\n\t\t\t},\r\n\t\t\tgetJson(url) {\r\n\t\t\t\treturn fetch(url)\r\n\t\t\t\t\t.then(result => result.json())\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t\t// this.error = true;\r\n\t\t\t\t\t})\r\n\t\t\t},\r\n\t\t\taddProduct(product) {\r\n\t\t\t\tlet catalogStorage = JSON.parse(localStorage.getItem(\"toCart\"));\r\n\t\t\t\tlet find = catalogStorage.find((item => product.id_product === item.id_product))\r\n\t\t\t\tif (find) {\r\n\t\t\t\t\tfind.quantity++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst prod = Object.assign({quantity: 1}, product);\r\n\t\t\t\t\tcatalogStorage.push(prod);\r\n\t\t\t\t}\r\n\t\t\t\tlet string = JSON.stringify(catalogStorage);\r\n\t\t\t\tlocalStorage.setItem(\"toCart\", string);\r\n\t\t\t\tthis.render();\r\n\t\t\t},\r\n\t\t\tclear() {\r\n\t\t\t\tlet collection = document.querySelectorAll('.shop-cart__item');\r\n\t\t\t\tfor (let elem of collection) {\r\n\t\t\t\t\telem.remove();\r\n\t\t\t\t}\r\n\t\t\t\tthis.cart = [];\r\n\t\t\t\tlocalStorage.removeItem(\"toCart\");\r\n\t\t\t\tthis.totalPrice();\r\n\t\t\t},\r\n\t\t\tdeleteItem(id) {\r\n\t\t\t\tthis.cart = this.cart.filter(item => item.id_product !== id)\r\n\t\t\t\tlet string = JSON.stringify(this.cart);\r\n\t\t\t\tlocalStorage.setItem(\"toCart\", string);\r\n\t\t\t\tthis.totalPrice();\r\n\t\t\t\tconsole.log(this.cart)\r\n\t\t\t},\r\n\t\t\tremoveCount(id) {\r\n\t\t\t\tthis.cart.map(item => {\r\n\t\t\t\t\tif (item.id_product === id) {\r\n\t\t\t\t\t\titem.quantity > 0 ? item.quantity-- : item.quantity = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet string = JSON.stringify(this.cart);\r\n\t\t\t\tlocalStorage.setItem(\"toCart\", string);\r\n\t\t\t\tthis.totalPrice();\r\n\t\t\t},\r\n\t\t\taddCount(id) {\r\n\t\t\t\tthis.cart.map(item => {\r\n\t\t\t\t\tif (item.id_product === id) {\r\n\t\t\t\t\t\titem.quantity++;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet string = JSON.stringify(this.cart);\r\n\t\t\t\tlocalStorage.setItem(\"toCart\", string);\r\n\t\t\t\tthis.totalPrice();\r\n\t\t\t},\r\n\t\t\ttotalPrice() {\r\n\t\t\t\tlet sum = 0;\r\n\t\t\t\tthis.cart.map(product => {\r\n\t\t\t\t\treturn sum += product.price * product.quantity\r\n\t\t\t\t});\r\n\t\t\t\tthis.cartPrice = sum;\r\n\t\t\t},\r\n\t\t\trender() {\r\n\t\t\t\tthis.cart = JSON.parse(localStorage.getItem(\"toCart\"));\r\n\t\t\t}\r\n\t\t},\r\n\t\tmounted() {\r\n\t\t\tthis.getJson(`${API + this.catalogUrl}`)\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tfor (let el of data) {\r\n\t\t\t\t\t\tthis.products.push(el);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlocalStorage.setItem(\"toCart\", JSON.stringify([]));\r\n\t\t\t\t\tthis.filter();\r\n\t\t\t\t\tthis.totalPrice();\r\n\t\t\t\t\tthis.render()\r\n\t\t\t\t});\r\n\t\t},\r\n\t}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}